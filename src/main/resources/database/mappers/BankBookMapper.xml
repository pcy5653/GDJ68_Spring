<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- # Mapper : sql문 작성하는 곳. -->
  <!-- ? 위치 : getter의 이름 (get을 빼고 첫글자 소문자변경) -->
  <mapper namespace="com.iu.main.bankBook.BankBookDAO">
  
  	<!-- getList, getTotal에서 활용 -->
  	<sql id="searchSql">
	  	WHERE BOOKNUM>0 
	  	AND
			<choose>
				<when test="kind == 'name'">
					BOOKNAME LIKE #{search}
				</when>
				<otherwise>
					BOOKCONTENTS LIKE #{search}
				</otherwise>
			</choose>
  	</sql>
  
  
  
  	<select id="getList" parameterType="com.iu.main.util.Pager" resultType="com.iu.main.bankBook.BankBookDTO">
  		<!-- CONTENT 제외 -->
  		<!-- 1. List에서 원하는 갯수만큼 보여주기(현재 1~10)  -->
		SELECT BOOKNUM, BOOKNAME, BOOKRATE, BOOKSALE FROM 
			(SELECT ROWNUM R, B.* FROM
				(
					SELECT * FROM BANKBOOK 
					<include refid="searchSql"></include>
<!-- 					WHERE BOOKNUM>0 	
						AND
						choose에서 선택해서 when이 아니면 그외 나머지(otherwise) 실행
						<choose>
							value값 상수이기에 '' 사용
							<when test="kind == 'name'">
								
								1. 연결연산자 || 이용해서 값을 가져오기 => '%'||#{search}||'%'
								2. pager의 getter 자체에 % 붙여서 가져오기
								
								BOOKNAME LIKE #{search}
							</when>
							<otherwise>
								BOOKCONTENTS LIKE #{search}
							</otherwise>
						</choose>	 -->
						<!-- 								  
						  - 태그에서 속성명 사용시 #{} 쓰지 않음
						  - #{} : 꺼내는 값, 문자열을 꺼낼때 자동으로 '' 붙어서 나옴
						  <if test="kind == name">
						  	AND BOOKNAME LIKE '%검색어%'
						  </if>
						  <if test="kind == contents">
						  	AND BOOKCONTENTS LIKE '%검색어%'
						  </if> 
						   -->
					ORDER BY BOOKNUM DESC
				) B
			)
		WHERE R BETWEEN #{startRow} AND #{lastRow}
  	</select>
  	
  	<!-- 2. List의 data 전체 갯수 출력, 결과값 : 숫자 > Long으로 받기 -->
  	<select id="getTotal" parameterType="com.iu.main.util.Pager" resultType="Long">
  		SELECT COUNT(BOOKNUM) FROM BANKBOOK
  		<include refid="searchSql"></include>
  	</select>
  	
  	
  	<!-- 
  		1. id : 사용하려는 DAO method명 작성 | 같은 namespace에서만 중복되지 않으면 된다.
  		2. parameterType : 사용된? 파라미터(외부에서 받아주는 데이터, 현재 DTO의 bookNum을 받아서 전달하기 때문에 ) 경로
  		3. resultType : 결과값을 setter에 넣는다, setter를 갖고 있는 DTO에 넣는다 -> BankBookDTO 타입
  					-> ?에 getter의 이름을 넣고 받은 값을 setter에 대입 > 해당 setter가 있는 클래스 위치 작성
  	-->
  	<select id="getDetail" parameterType="BankBookDTO" resultMap="getDetailResult">
  		SELECT B.*, BF.*
  		FROM BANKBOOK B
  		LEFT OUTER JOIN
  		BANKFILE BF
  		ON(B.BOOKNUM = BF.BOOKNUM)
  		WHERE B.BOOKNUM=#{bookNum}
  	</select>
  	<resultMap type="BankBookDTO" id="getDetailResult">
  		<id column="BOOKNUM" property="bookNum"/>
  		<result column="BOOKNAME" property="bookName"/>
  		<result column="BOOKCONTENTS" property="bookContents"/>
  		<result column="BOOKRATE" property="bookRate"/>
		<result column="BOOKSALE" property="bookSale"/>
		
		<!-- N개의 bankfileDTO -->
		<collection property="fileDTOs" javaType="List" ofType="BankBookFileDTO">
			<id column="FILENUM" property="fileNum"/>
			<result column="FILENAME" property="fileName"/>
			<result column="ORIGINALNAME" property="originalName"/>
		</collection>
  	</resultMap>
  	
  	
  	<!-- BookNum의 번호를 받기 | 실행X -->
  	<select id="getSequence" resultType="Long">
  		SELECT BANK_SEQ.NEXTVAL FROM DUAL
  	</select>
  	
  	<!-- 받아온 bookNum을 BANK_SEQ.NEXTVAL로 집어 넣지 않는다. -->
  	<insert id="setAdd" parameterType="BankBookDTO">
  		<selectKey keyProperty="bookNum" resultType="Long" order="BEFORE">
  			<!-- order="BEFORE" = 밑의 INSERT쿼리가 실행되기 전에 해당 SELECT문을 실행하여 KeyProperty에 넣어라-->	
  			<!-- BookNum의 번호를 받기 -->
			SELECT BANK_SEQ.NEXTVAL FROM DUAL
  		</selectKey>
  		INSERT INTO BANKBOOK
  		VALUES (#{bookNum}, #{bookName}, #{bookRate}, #{bookSale}, #{bookContents})
  	</insert>
  	
  	<!-- file 정보 넣기 -->
  	<insert id="setFileAdd" parameterType="BankBookFileDTO">
  		INSERT INTO BANKFILE (FILENUM, BOOKNUM, FILENAME, ORIGINALNAME)
  		VALUES (BF_SEQ.NEXTVAL, #{bookNum}, #{fileName}, #{originalName})
  	</insert>
  	
  	
  	
  	<!-- parameterType는 client에게 받은 값인데 다른 경우도 보여주는 것.
  		패키지명이 아닌 Long타입을 갖는 경로작성
  	 -->
  	<delete id="setDelete" parameterType="Long">
  		DELETE BANKBOOK WHERE BOOKNUM=#{bookNum}
  	</delete>
  	
  	
  	<update id="setUpdate" parameterType="BankBookDTO">
  		UPDATE BANKBOOK 
  		SET BOOKNAME=#{bookName}, BOOKRATE=#{bookRate}, BOOKSALE=#{bookSale}, BOOKCONTENTS=#{bookContents}
  		WHERE BOOKNUM=#{bookNum} 
  	</update>
  	
  	
  	
  	
  	<!-- comment -->
  	<!-- 특정 상품에 대한 댓글만 가져오기 
  		parameter로 2가지 내용(bookNum, Pager의 내용)-->
  	
  	<select id="getCommentTotal" parameterType="CommentDTO" resultType="Long">
  		SELECT COUNT(COMMENTNUM) FROM BOOKCOMMENT
  		WHERE BOOKNUM = #{bookNum}
  	</select>
  	<select id="getCommentList" parameterType="Map" resultType="CommentDTO">
  		SELECT * FROM
  		(SELECT ROWNUM R, C.* FROM
  		(SELECT * FROM BOOKCOMMENT 
  		WHERE BOOKNUM = #{comment.bookNum}	
  		ORDER BY COMMENTNUM DESC) C)
  		WHERE R BETWEEN #{pager.startRow} AND #{pager.lastRow}
  	</select>
  	
  	<insert id="setCommentAdd" parameterType="CommentDTO" >
  		INSERT INTO BOOKCOMMENT (COMMENTNUM, ID, BOOKNUM, COMMENTCONTENTS, COMMENTDATE)
  		VALUES (CO_SEQ.NEXTVAL, #{id}, #{bookNum}, #{commentContents}, SYSDATE)
  	</insert>
  	
  </mapper>
